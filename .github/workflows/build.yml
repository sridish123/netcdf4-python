name: Build and Test Linux
on: [push, pull_request]
jobs:
  build-linux:
    name: Python (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    env:
      PNETCDF_VERSION: 1.12.1
      NETCDF_VERSION: 4.7.4
      NETCDF_DIR: ${{ github.workspace }}/..
      NETCDF_EXTRA_CONFIG: --enable-pnetcdf
      CC: mpicc.mpich
#     NO_NET: 1
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:

    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Ubuntu Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install mpich libmpich-dev libhdf5-mpich-dev libcurl4-openssl-dev 
        echo "Download and build PnetCDF version ${PNETCDF_VERSION}"
        wget https://parallel-netcdf.github.io/Release/pnetcdf-1.12.1.tar.gz
        tar -xzf pnetcdf-${PNETCDF_VERSION}.tar.gz
        pushd pnetcdf-${PNETCDF_VERSION}
        ./configure --prefix $NETCDF_DIR --enable-shared --disable-fortran --disable-cxx
        make -j 2
        make install
        popd
        echo "Download and build netCDF version ${NETCDF_VERSION}"
        wget ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-c-${NETCDF_VERSION}.tar.gz
        tar -xzf netcdf-c-${NETCDF_VERSION}.tar.gz
        pushd netcdf-c-${NETCDF_VERSION}
        export CPPFLAGS="-I/usr/include/hdf5/mpich -I${NETCDF_DIR}/include"
        export LDFLAGS="-L${NETCDF_DIR}/lib"
        export LIBS="-lhdf5_mpich_hl -lhdf5_mpich -lm -lz"
        ./configure --prefix $NETCDF_DIR --enable-netcdf-4 --enable-shared --enable-dap --enable-parallel4 $NETCDF_EXTRA_CONFIG
        make -j 2
        make install
        popd
#   - name: The job has failed
#     if: ${{ failure() }}
#     run: |
#       cd netcdf-c-${NETCDF_VERSION}
#       cat config.log 

    - name: Install python dependencies via pip
      run: |
        python -m pip install --upgrade pip
        pip install numpy cython cftime pytest twine wheel check-manifest mpi4py
    - name: Install netcdf4-python
      run: |
        export PATH=${NETCDF_DIR}/bin:${PATH} 
        python setup.py install
    - name: Test
      run: |
        export PATH=${NETCDF_DIR}/bin:${PATH} 
        python checkversion.py
        # serial
        cd test
        python run_all.py
        # parallel (hdf5 for netcdf4, pnetcdf for netcdf3)
        cd ../examples
        mpirun.mpich -np 4 python mpi_example.py
        if [ $? -ne 0 ] ; then
          echo "hdf5 mpi test failed!"
          exit 1
        else
          echo "hdf5 mpi test passed!"
        fi
        mpirun.mpich -np 4 python mpi_example.py NETCDF3_64BIT_DATA
        if [ $? -ne 0 ] ; then
          echo "pnetcdf mpi test failed!"
          exit 1
        else
          echo "pnetcdf mpi test passed!"
        fi
    - name: Tarball
      run: |
        export PATH=${NETCDF_DIR}/bin:${PATH} 
        python setup.py --version  
        pip wheel . -w dist --no-deps 
        check-manifest --verbose 
        twine check dist/* 
  
  test-aarch64:
    name: "Test ${{ matrix.pyver }} aarch64"
    strategy:
      matrix:
        pyver: [cp38-cp38]
        arch: [aarch64]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      py: /opt/python/${{ matrix.pyver }}/bin/python
      img: quay.io/pypa/manylinux2014_${{ matrix.arch }}
      CC: mpicc.mpich
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Install tools
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} ${{ env.py }} -m pip install -U  pip build
    - name: Install Ubuntu Dependencies
      run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '${{ env.py }} -m pip install virtualenv && ${{ env.py }} -m venv .env && \
            #source .env/bin/activate && \
            uname -m && \
            yum install -y sudo && \
            sudo yum update && \
            sudo yum install -y epel-release && \
            sudo yum-config-manager --enable epel && \
            sudo yum -y install mpich mpich-devel openmpi-devel hdf5-mpich-devel libcurl-devel openssl-devel wget && \
            #source /etc/profile.d/modules.sh && \
            #module load mpi && \
            echo "Download and build PnetCDF version 1.12.1" && \
            wget https://parallel-netcdf.github.io/Release/pnetcdf-1.12.1.tar.gz && \
            tar -xzf pnetcdf-1.12.1.tar.gz && \
            pushd pnetcdf-1.12.1 && \
            sudo yum -y install mpich mpich-devel openmpi-devel hdf5-mpich-devel && \
            find /var -name mpic && \
            export PATH=/var/cache/yum/aarch64/7/epel/packages/:$PATH && \
            #./configure --prefix ${{ github.workspace }}/.. --enable-shared --with-mpi --disable-fortran --disable-cxx && \
            ./configure --prefix ${{ github.workspace }}/.. --enable-shared --with-mpi --disable-fortran --disable-cxx && \
            make -j 2 && \
            make install && \
            popd && \
            whereis mpich && \
            #find mpicc && \
            echo "Download and build netCDF version 4.7.4" && \
            wget ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-c-4.7.4.tar.gz && \
            tar -xzf netcdf-c-4.7.4.tar.gz && \
            pushd netcdf-c-4.7.4 && \
            export CPPFLAGS="-I/usr/include/hdf5/mpich -I${{ github.workspace }}/../include" && \
            export LDFLAGS="-L${{ github.workspace }}/../lib" && \
            export PATH=/usr/lib64/mpich:${PATH} && \
            export LIBS="-lhdf5_mpich_hl -lhdf5_mpich -lm -lz" && \
            ./configure --prefix ${{ github.workspace }}/.. CC=mpicc.mpich --enable-netcdf-4 --enable-shared --enable-dap --enable-parallel4 --enable-pnetcdf && \
            make -j 2 && \
            make install && \
            popd && \
            python setup.py install && \
            export PATH=${{ github.workspace }}/../bin:${PATH} && \
            python checkversion.py && \
            cd test && \
            python run_all.py && \
            # parallel (hdf5 for netcdf4, pnetcdf for netcdf3)
            cd ../examples && \
            mpirun.mpich -np 4 python mpi_example.py && \
            if [ $? -ne 0 ] ; then
              echo "hdf5 mpi test failed!"
              exit 1
            else
              echo "hdf5 mpi test passed!"
            fi && \
            mpirun.mpich -np 4 python mpi_example.py NETCDF3_64BIT_DATA && \
            if [ $? -ne 0 ] ; then
              echo "pnetcdf mpi test failed!"
              exit 1
            else
              echo "pnetcdf mpi test passed!"
            fi && \
            export PATH=${{ github.workspace }}/../bin:${PATH}  && \
            python setup.py --version && \
            pip wheel . -w dist --no-deps && \
            check-manifest --verbose && \
            twine check dist/* && \
            deactivate'
